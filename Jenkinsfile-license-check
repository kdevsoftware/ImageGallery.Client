node('master') {
    
    stage('Git checkout') {
        git branch: 'Auth', credentialsId: 'gihub-key', url: 'git@github.com:stuartshay/ImageGallery.Client.git'
    }
    
    stage('License Check') {
        docker.image('node:9.3').inside  {
            sh "npm install -g license-checker"
            sh "rm -rf licenses.json licenses.html"
            sh "cd src/ImageGallery.Client && npm install && license-checker --json > licenses.json"
            def license = readFile('src/ImageGallery.Client/licenses.json')
            
            sh """cat <<EOF >licenses.html
<html>

<head>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <style>
        .collapsible {
            background-color: #777;
            color: white;
            cursor: pointer;
            padding: 18px;
            width: 100%;
            border: none;
            text-align: left;
            outline: none;
            font-size: 15px;
            border-bottom: 1px solid;
        }

        .active,
        .collapsible:hover {
            background-color: #555;
        }

        .content {
            padding: 0 18px;
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.2s ease-out;
            background-color: #f1f1f1;
        }
    </style>
</head>

<body>
    <h2>License Report</h2>

    <div id="licenseReport">

    </div>

    <script>
        var dataReport = $license;
        
        var htmlReport = '';
        for (var key in dataReport) {
            // skip loop if the property is from prototype
            if (!dataReport.hasOwnProperty(key)) continue;
            
            htmlReport += '<button class="collapsible">' + key + '</button><div class="content">';
            var obj = dataReport[key];
            for (var prop in obj) {
                // skip loop if the property is from prototype
                if (!obj.hasOwnProperty(prop)) continue;

                // your code
                htmlReport += '<p> ' + prop + ': ' + obj[prop] + '</p>'
            }

            htmlReport += '</div>';
        }
        var licenseReport = document.getElementById("licenseReport");
        licenseReport.innerHTML = htmlReport;
        var coll = document.getElementsByClassName("collapsible");
        var i;

        for (i = 0; i < coll.length; i++) {
            coll[i].addEventListener("click", function () {
                this.classList.toggle("active");
                var content = this.nextElementSibling;
                if (content.style.maxHeight) {
                    content.style.maxHeight = null;
                } else {
                    content.style.maxHeight = content.scrollHeight + "px";
                }
            });
        }
    </script>

</body>

</html>
EOF"""
        }
    }
    
    stage('Publish') {
        archiveArtifacts '**/licenses.json, **/licenses.html'
        publishHTML([allowMissing: false, alwaysLinkToLastBuild: true, keepAll: false, reportDir: '', reportFiles: 'licenses.html', reportName: 'License Check Report', reportTitles: ''])

    }
}
